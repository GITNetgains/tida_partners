name: Android build distribution
on:
  #trigger build when any push happens on below mentioned branches. 
  push:
    branches:
      - master
     
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
jobs:
 build_appbundle:
    name: Build Flutter (Android)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-java@v1
        with:
          java-version: "12.x"
      - uses: subosito/flutter-action@v2
        with:
         flutter-version: '3.10.1'
         channel: 'stable'
      - run: flutter channel stable
      - run: make app
      - name: Download artifact for external use
        uses: actions/download-artifact@v2
        with:
          name: app
      - name: Conditionally Run upload Upload to Playstore 
        uses: r0adkll/upload-google-play@v1
        with:
          serviceAccountJsonPlainText: ${{ secrets.PLAY_SERVICE_ACCOUNT }}
          packageName: org.localsecurity.integrator_customer_management
          releaseFiles: build/app/outputs/bundle/release/app-release.aab
          track: internal
          status: completed

    #Job for uplaoding ipa to test flight
 build-production:
   needs: build_appbundle # This is important
   runs-on: macos-latest
   steps:
     # Checks-out our repository under $GITHUB_WORKSPACE, so our job can access it
     - name: Checkout repository
       uses: actions/checkout@v2

      # Install the Apple certificate and provisioning profile
     - name: Install the Apple certificate and provisioning profile
       env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.TEST_FLIGHT_CERTIFICATE }}
          P12_PASSWORD: ${{ secrets.TEST_FLIGHT_PASS }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.MOBILEPROVISION_BASE64_TEST_FLIGHT }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
       run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode --output $PP_PATH
          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
      # Install flutter
     - uses: actions/checkout@v3
     - uses: subosito/flutter-action@v2
       with:
          flutter-version: '3.10.1'
          channel: 'stable'
          architecture: x64
     - run: flutter pub get
     - run: cd ios && rm -f Podfile.lock
     - run: make ipa
     # Collect the file and upload as artifact
     - name: collect ipa artifacts
       uses: actions/upload-artifact@v3
       with:
         name: release
         # Path to the release files
         path: build/ios/ipa/*.ipa
         if-no-files-found: error
     - name: Conditionally Run upload to test flight
       uses: apple-actions/upload-testflight-build@v1
       with:
         app-path: 'integrator_customer_management/build/ios/ipa/Bounty Hunter.ipa'
         issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
         api-key-id: ${{ secrets.APPSTORE_API_KEY_ID }}
         api-private-key: ${{ secrets.APPSTORE_API_PRIVATE_KEY }}
     # Important! Cleanup: remove the certificate and provisioning profile from the runner!
     - name: Clean up keychain and provisioning profile
       if: ${{ always() }}
       run: |
         security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
         rm ~/Library/MobileDevice/Provisioning\ Profiles/build_pp.mobileprovision
        
         
